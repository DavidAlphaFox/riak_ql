%% -*- erlang -*-
-include_lib("eunit/include/eunit.hrl").
-compile(export_all).

%% Tests
keywords_1_test_() ->
    Str = "select",
    Got = riak_ql_lexer:get_tokens(Str),
    ?_assertEqual([{select, <<"select">>}], Got).

keywords_2_test_() ->
    Str = "seLEct",
    Got = riak_ql_lexer:get_tokens(Str),
    ?_assertEqual([{select, <<"seLEct">>}], Got).

keywords_3_test_() ->
    Got = riak_ql_lexer:get_tokens("from LiMit Where anD oR delETe DROP Groupby MeRge InneR JOIn As"),
    Expected = [
                {from,    <<"from">>},
                {limit,   <<"LiMit">>},
                {where,   <<"Where">>},
                {and_,    <<"anD">>},
                {or_,     <<"oR">>},
                {delete,  <<"delETe">>},
                {drop,    <<"DROP">>},
                {groupby, <<"Groupby">>},
                {merge,   <<"MeRge">>},
                {inner,   <<"InneR">>},
                {join,    <<"JOIn">>},
                {as,      <<"As">>}
               ],
    ?_assertEqual(Expected, Got).

keywords_3a_test_() ->
    Got = riak_ql_lexer:get_tokens("from limit where and or delete drop groupby merge inner join as"),
    Expected = [
                {from,    <<"from">>},
                {limit,   <<"limit">>},
                {where,   <<"where">>},
                {and_,    <<"and">>},
                {or_,     <<"or">>},
                {delete,  <<"delete">>},
                {drop,    <<"drop">>},
                {groupby, <<"groupby">>},
                {merge,   <<"merge">>},
                {inner,   <<"inner">>},
                {join,    <<"join">>},
                {as,      <<"as">>}
               ],
    ?_assertEqual(Expected, Got).

keywords_3b_test_() ->
    Got = riak_ql_lexer:get_tokens("FROM LIMIT WHERE AND OR DELETE DROP GROUPBY MERGE INNER JOIN AS"),
    Expected = [
                {from,    <<"FROM">>},
                {limit,   <<"LIMIT">>},
                {where,   <<"WHERE">>},
                {and_,    <<"AND">>},
                {or_,     <<"OR">>},
                {delete,  <<"DELETE">>},
                {drop,    <<"DROP">>},
                {groupby, <<"GROUPBY">>},
                {merge,   <<"MERGE">>},
                {inner,   <<"INNER">>},
                {join,    <<"JOIN">>},
                {as,      <<"AS">>}
               ],
    ?_assertEqual(Expected, Got).

keyword_general_test_() ->
    ?_assertEqual(
       [
        {boolean, <<"boolean">>},
        {boolean, <<"BOOLEAN">>},
        {boolean, <<"booLEan">>},
        {any, <<"any">>},
        {any, <<"ANY">>},
        {any, <<"Any">>}
       ],
       riak_ql_lexer:get_tokens("boolean BOOLEAN booLEan any ANY Any")
      ).


keyword_int_test_() ->
    ?_assertEqual(
       [{sint64, <<"sint64">>},
        {sint64, <<"SINT64">>},
        {sint64, <<"siNT64">>},
        {sint64, <<"Sint64">>}],
       riak_ql_lexer:get_tokens("sint64 SINT64 siNT64 Sint64")
      ).

keyword_double_test_() ->
    ?_assertEqual(
       [{double, <<"double">>},
        {double, <<"Double">>},
        {double, <<"dOuble">>},
        {double, <<"DOUBLE">>}],
       riak_ql_lexer:get_tokens("double Double dOuble DOUBLE")
      ).

keywords_create_test_() ->
    Got = riak_ql_lexer:get_tokens("create table not null primary key"),
    Expected = [
                {create_table, <<"create table">>},
                {not_null, <<"not null">>},
                {primary_key, <<"primary key">>}],
    ?_assertEqual(Expected, Got).

words_containing_keywords_test_() ->
    Got = riak_ql_lexer:get_tokens("error or horror and handy andy or "
                                   "zdoublecintxcreateyb or jimmy3boy or jimmy4"),
    Expected = [
                {identifier, <<"error">>},
                {or_,   <<"or">>},
                {identifier, <<"horror">>},
                {and_,  <<"and">>},
                {identifier, <<"handy">>},
                {identifier, <<"andy">>},
                {or_,   <<"or">>},
                {identifier, <<"zdoublecintxcreateyb">>},
                {or_,   <<"or">>},
                {identifier, <<"jimmy3boy">>},
                {or_,   <<"or">>},
                {identifier, <<"jimmy4">>}
               ],
    ?_assertEqual(Expected, Got).

words_containing_digits_test_() ->
    Got = riak_ql_lexer:get_tokens("'sha512' sha 512"),
    Expected = [
                {character_literal, <<"sha512">>},
                {identifier, <<"sha">>},
                {integer, 512}
               ],
    ?_assertEqual(Expected, Got).

nums_test_() ->
    Got = riak_ql_lexer:get_tokens("1 -2 2.0 -2.0 3.3e+3 -3.3e-3"),
    Expected = [
                {integer, 1},
                {integer, -2},
                {float, 2.0},
                {float, -2.0},
                {float, 3300.0},
                {float, -0.0033}
               ],
    ?_assertEqual(Expected, Got).

ops_test_() ->
    Got = riak_ql_lexer:get_tokens("> < <> != !~ = =~"),
    Expected = [
                {gt,        <<">">>},
                {lt,        <<"<">>},
                {ne,        <<"<>">>},
                {nomatch,   <<"!=">>},
                {notapprox, <<"!~">>},
                {eq,        <<"=">>},
                {approx,    <<"=~">>}
               ],
    ?_assertEqual(Expected, Got).

brackets_test_() ->
    Got = riak_ql_lexer:get_tokens(" ( )"),
    Expected = [
                {openb,  <<"(">>},
                {closeb, <<")">>}
               ],
    ?_assertEqual(Expected, Got).

keywords_in_words_test_() ->
    Got = riak_ql_lexer:get_tokens("mydouble mysint64 myboolean mycreate myany"),
    Expected = [
                {identifier, <<"mydouble">>},
                {identifier, <<"mysint64">>},
                {identifier, <<"myboolean">>},
                {identifier, <<"mycreate">>},
                {identifier, <<"myany">>}
               ],
    ?_assertEqual(Expected, Got).

datetime_1a_test_() ->
    Got = riak_ql_lexer:get_tokens("'23 April 1963 8:00 AM'"),
    Expected = [
                {datetime, {{1963, 4, 23}, {8, 0, 0}}}
               ],
    ?_assertEqual(Expected, Got).

datetime_1b_test_() ->
    Got = riak_ql_lexer:get_tokens("'  23   April 1963 8:00 AM  '"),
    Expected = [
                {datetime, {{1963, 4, 23}, {8, 0, 0}}}
               ],
    ?_assertEqual(Expected, Got).

%% this test can never pass becuz the date parser substitutes the H:M:s from now() if there is not time in the string
%% datetime_1c_test_() ->
%%     Got = riak_ql_lexer:get_tokens("'2013-08-13'"),
%%     Expected = [
%%              {datetime, {{2013, 8, 13}, {0, 0, 0}}}
%%             ],
%%     ?_assertEqual(Expected, Got).

datetime_1d_test_() ->
    Got = riak_ql_lexer:get_tokens("'2013-08-12 23:32:01'"),
    Expected = [
                {datetime, {{2013, 8, 12}, {23, 32, 1}}}
               ],
    ?_assertEqual(Expected, Got).

not_a_date_test_() ->
    Got = riak_ql_lexer:get_tokens("'ergle'"),
    Expected = [
                {character_literal, <<"ergle">>}
               ],
    ?_assertEqual(Expected, Got).

multiple_single_quotes_test_() ->
    Got = riak_ql_lexer:get_tokens("'user_1' 'San Fierro' 'klingon''name'"),
    Expected = [
                {character_literal, <<"user_1">>},
                {character_literal, <<"San Fierro">>},
                {character_literal, <<"klingon'name">>}
               ],
    ?_assertEqual(Expected, Got).

double_quote_1_test_() ->
    Got = riak_ql_lexer:get_tokens("\" yardle hoop !@#$%^&*() _ -\""),
    Expected = [
                {identifier, <<" yardle hoop !@#$%^&*() _ -">>}
               ],
    ?_assertEqual(Expected, Got).

double_quote_2_test_() ->
    Got = riak_ql_lexer:get_tokens("\"first quote\" \"second quote\""),
    Expected = [
                {identifier, <<"first quote">>},
                {identifier, <<"second quote">>}
               ],
    ?_assertEqual(Expected, Got).

regex_1_test_() ->
    Got = riak_ql_lexer:get_tokens("/*./"),
    Expected = [
                {regex, <<"/*./">>}
               ],
    ?_assertEqual(Expected, Got).

regex_2_test_() ->
    Got = riak_ql_lexer:get_tokens("/^*./i"),
    Expected = [
                {regex, <<"/^*./i">>}
               ],
    io:format("Expected is ~p~n", [Expected]),
    io:format("Got is ~p~n", [Got]),
    ?_assertEqual(Expected, Got).

regex_3_test_() ->
    Got = riak_ql_lexer:get_tokens("/*./ or /erkle/"),
    Expected = [
                {regex, <<"/*./">>},
                {or_,   <<"or">>},
                {regex, <<"/erkle/">>}
               ],
    ?_assertEqual(Expected, Got).

chars_test_() ->
    Got = riak_ql_lexer:get_tokens("r_t , ee where"),
    Expected = [
                {identifier, <<"r_t">>},
                {comma, <<",">>},
                {identifier, <<"ee">>},
                {where, <<"where">>}
               ],
    io:format("Expected is ~p~n", [Expected]),
    io:format("Got is ~p~n", [Got]),
    ?_assertEqual(Expected, Got).

arithmatic_test_() ->
    Got = riak_ql_lexer:get_tokens(" + - * / "),
    Expected = [
                {plus,       <<"+">>},
                {minus,      <<"-">>},
                {maybetimes, <<"*">>},
                {div_,       <<"/">>}
               ],
    ?_assertEqual(Expected, Got).

general_test_() ->
    Got = riak_ql_lexer:get_tokens("select v from r_t where time > '23 April 63 1:2:3'"),
    Expected = [
                {select, <<"select">>},
                {identifier,  <<"v">>},
                {from, <<"from">>},
                {identifier, <<"r_t">>},
                {where, <<"where">>},
                {identifier, <<"time">>},
                {gt, <<">">>},
                {datetime, {{63, 4, 23}, {1, 2, 3}}}
               ],
    io:format("Expected is ~p~n", [Expected]),
    io:format("Got is ~p~n", [Got]),
    ?_assertEqual(Expected, Got).

timeseries_test_() ->
    Got = riak_ql_lexer:get_tokens("CREATE TABLE Geo ("
                                   ++ "geohash varchar not_null, "
                                   ++ "user varchar not_null, "
                                   ++ "time timestamp not_null, "
                                   ++ "weather varchar not_null, "
                                   ++ "temperature double not_null, "
                                   ++ "PRIMARY KEY ((geohash, quantum(time, 15, m), time, user)"),
    Expected = [
                {create_table, <<"CREATE TABLE">>},
                {identifier,<<"Geo">>},
                {openb, <<"(">>},
                {identifier,<<"geohash">>},
                {varchar, <<"varchar">>},
                {identifier,<<"not_null">>},
                {comma, <<",">>},
                {identifier,<<"user">>},
                {varchar, <<"varchar">>},
                {identifier,<<"not_null">>},
                {comma, <<",">>},
                {identifier,<<"time">>},
                {timestamp, <<"timestamp">>},
                {identifier,<<"not_null">>},
                {comma, <<",">>},
                {identifier,<<"weather">>},
                {varchar, <<"varchar">>},
                {identifier,<<"not_null">>},
                {comma, <<",">>},
                {identifier,<<"temperature">>},
                {double, <<"double">>},
                {identifier,<<"not_null">>},
                {comma, <<",">>},
                {primary_key, <<"PRIMARY KEY">>},
                {openb, <<"(">>},
                {openb, <<"(">>},
                {identifier,<<"geohash">>},
                {comma, <<",">>},
                {quantum, <<"quantum">>},
                {openb, <<"(">>},
                {identifier,<<"time">>},
                {comma, <<",">>},
                {integer,15},
                {comma, <<",">>},
                {identifier,<<"m">>},
                {closeb, <<")">>},
                {comma, <<",">>},
                {identifier,<<"time">>},
                {comma, <<",">>},
                {identifier,<<"user">>},
                {closeb, <<")">>}
               ],
    ?_assertEqual(Expected, Got).

unquoted_identifiers_test() ->
    String = "cats = be a st",
    Got = riak_ql_lexer:get_tokens(String),
    Expected = [
                {identifier, <<"cats">>},
                {eq, <<"=">>},
                {identifier, <<"be">>},
                {identifier, <<"a">>},
                {identifier, <<"st">>}
               ],
    ?_assertEqual(Expected, Got).
